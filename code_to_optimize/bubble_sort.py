def sorter(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j + 1]:
                temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
    return arr


# CACHED_TESTS = "import unittest\ndef sorter(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\nclass SorterTestCase(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(sorter([]), [])\n    def test_single_element_list(self):\n        self.assertEqual(sorter([5]), [5])\n    def test_ascending_order_list(self):\n        self.assertEqual(sorter([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n    def test_descending_order_list(self):\n        self.assertEqual(sorter([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5])\n    def test_random_order_list(self):\n        self.assertEqual(sorter([3, 1, 4, 2, 5]), [1, 2, 3, 4, 5])\n    def test_duplicate_elements_list(self):\n        self.assertEqual(sorter([3, 1, 4, 2, 2, 5, 1]), [1, 1, 2, 2, 3, 4, 5])\n    def test_negative_numbers_list(self):\n        self.assertEqual(sorter([-5, -2, -8, -1, -3]), [-8, -5, -3, -2, -1])\n    def test_mixed_data_types_list(self):\n        self.assertEqual(sorter(['apple', 2, 'banana', 1, 'cherry']), [1, 2, 'apple', 'banana', 'cherry'])\n    def test_large_input_list(self):\n        self.assertEqual(sorter(list(range(1000, 0, -1))), list(range(1, 1001)))\n    def test_list_with_none_values(self):\n        self.assertEqual(sorter([None, 2, None, 1, None]), [None, None, None, 1, 2])\n    def test_list_with_nan_values(self):\n        self.assertEqual(sorter([float('nan'), 2, float('nan'), 1, float('nan')]), [1, 2, float('nan'), float('nan'), float('nan')])\n    def test_list_with_complex_numbers(self):\n        self.assertEqual(sorter([3 + 2j, 1 + 1j, 4 + 3j, 2 + 1j, 5 + 4j]), [1 + 1j, 2 + 1j, 3 + 2j, 4 + 3j, 5 + 4j])\n    def test_list_with_custom_class_objects(self):\n        class Person:\n            def __init__(self, name, age):\n                self.name = name\n                self.age = age\n            def __repr__(self):\n                return f\"Person('{self.name}', {self.age})\"\n        input_list = [Person('Alice', 25), Person('Bob', 30), Person('Charlie', 20)]\n        expected_output = [Person('Charlie', 20), Person('Alice', 25), Person('Bob', 30)]\n        self.assertEqual(sorter(input_list), expected_output)\n    def test_list_with_uncomparable_elements(self):\n        with self.assertRaises(TypeError):\n            sorter([5, 'apple', 3, [1, 2, 3], 2])\n    def test_list_with_custom_comparison_function(self):\n        input_list = [5, 4, 3, 2, 1]\n        expected_output = [5, 4, 3, 2, 1]\n        self.assertEqual(sorter(input_list, reverse=True), expected_output)\nif __name__ == '__main__':\n    unittest.main()"

CACHED_TESTS = "import pytest\nfrom bubble_sort import sorter\n\n@pytest.mark.parametrize('input_list, expected_output', [\n    ([], []),\n    ([5], [5]),\n    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),\n    ([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]),\n    ([3, 1, 4, 2, 5], [1, 2, 3, 4, 5]),\n    ([3, 1, 4, 2, 2, 5, 1], [1, 1, 2, 2, 3, 4, 5]),\n    ([-5, -2, -8, -1, -3], [-8, -5, -3, -2, -1]),\n    (['apple', 2, 'banana', 1, 'cherry'], [1, 2, 'apple', 'banana', 'cherry']),\n    (list(range(1000, 0, -1)), list(range(1, 1001))),\n    ([None, 2, None, 1, None], [None, None, None, 1, 2]),\n    ([float('nan'), 2, float('nan'), 1, float('nan')], [1, 2, float('nan'), float('nan'), float('nan')]),\n    ([3 + 2j, 1 + 1j, 4 + 3j, 2 + 1j, 5 + 4j], [1 + 1j, 2 + 1j, 3 + 2j, 4 + 3j, 5 + 4j]),\n    # Add more test cases here\n])\ndef test_sorter(input_list, expected_output):\n    assert sorter(input_list) == expected_output\n"

CACHED_INSTRUMENTED_TESTS = "import time\nimport gc\nimport os\nimport sqlite3\nimport pickle\n\n\ndef codeflash_wrap(wrapped, test_module_name, test_class_name, test_name, function_name, line_id, codeflash_cur, codeflash_con, *args, **kwargs):\n    test_id = f'{test_module_name}:{test_class_name}:{test_name}:{line_id}'\n    if not hasattr(codeflash_wrap, 'index'):\n        codeflash_wrap.index = {}\n    if test_id in codeflash_wrap.index:\n        codeflash_wrap.index[test_id] += 1\n    else:\n        codeflash_wrap.index[test_id] = 0\n    codeflash_test_index = codeflash_wrap.index[test_id]\n    invocation_id = f'{line_id}_{codeflash_test_index}'\n    gc.disable()\n    counter = time.perf_counter_ns()\n    return_value = wrapped(*args, **kwargs)\n    codeflash_duration = time.perf_counter_ns() - counter\n    gc.enable()\n    codeflash_cur.execute('INSERT INTO test_results VALUES (?, ?, ?, ?, ?, ?, ?)', (test_module_name, test_class_name, test_name, function_name, invocation_id, codeflash_duration, pickle.dumps(return_value)))\n    codeflash_con.commit()\n    return return_value\n\n\nfrom bubble_sort import sorter\nimport pytest\n\n@pytest.mark.parametrize('input_list, expected_output', [\n    ([], []),\n    ([5], [5]),\n    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),\n    ([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]),\n    ([3, 1, 4, 2, 5], [1, 2, 3, 4, 5]),\n    ([3, 1, 4, 2, 2, 5, 1], [1, 1, 2, 2, 3, 4, 5]),\n    ([-5, -2, -8, -1, -3], [-8, -5, -3, -2, -1]),\n    (['apple', 2, 'banana', 1, 'cherry'], [1, 2, 'apple', 'banana', 'cherry']),\n    (list(range(1000, 0, -1)), list(range(1, 1001))),\n    ([None, 2, None, 1, None], [None, None, None, 1, 2]),\n    ([float('nan'), 2, float('nan'), 1, float('nan')], [1, 2, float('nan'), float('nan'), float('nan')]),\n    ([3 + 2j, 1 + 1j, 4 + 3j, 2 + 1j, 5 + 4j], [1 + 1j, 2 + 1j, 3 + 2j, 4 + 3j, 5 + 4j]),\n    # Add more test cases here\n])\ndef test_sorter(input_list, expected_output):\n    codeflash_iteration = os.environ['CODEFLASH_TEST_ITERATION']\n    codeflash_con = sqlite3.connect(f'/var/folders/gq/15b1g3r95zj1y8p0c737z7sh0000gn/T/codeflash__ey38owb/test_return_values_{codeflash_iteration}.sqlite')\n    codeflash_cur = codeflash_con.cursor()\n    codeflash_cur.execute('CREATE TABLE IF NOT EXISTS test_results (test_module_path TEXT, test_class_name TEXT, test_function_name TEXT, function_getting_tested TEXT, iteration_id TEXT, runtime INTEGER, return_value BLOB)')\n    codeflash_return_value = codeflash_wrap(sorter, 'code_to_optimize.tests.pytest.bubble_sort', None, 'test_sorter', 'sorter', 0, codeflash_cur, codeflash_con, input_list)\n    output = codeflash_return_value\n    assert output == expected_output\n    codeflash_con.close()\n"
